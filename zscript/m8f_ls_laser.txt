//-----------------------------------------------------------------------------
//
// Copyright 2018 mmaulwurff (Alexander Kromm)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/
//
//-----------------------------------------------------------------------------
//

class m8f_ls_PuffBase : Actor
{
  Default
  {
    Mass 0;
    Radius 1;
    Height 2;
    +NOBLOCKMAP;
    +NOGRAVITY;
    +BLOODLESSIMPACT;
    +PUFFONACTORS;
    +DONTSPLASH;
    +NOTRIGGER;
    +FORCEXYBILLBOARD;
    +NOTONAUTOMAP;
    RenderStyle "Stencil";
  }

  States
    {
    Spawn:
      TNT1 A 0;
      WDOB A 1 BRIGHT;
      Stop;
    }
}

class m8f_ls_PuffPositive : m8f_ls_PuffBase
{
  override void PostBeginPlay()
  {
    PlayerInfo player = players[consolePlayer];
    string c = CVar.GetCVar("m8f_ls_CustomColor", player).GetString();
    double s = CVar.GetCVar("m8f_ls_Scale", player).GetFloat();

    SetShade(c);
    Scale.X  = s;
    Scale.Y  = s;
  }
}

class m8f_ls_PuffNegative : m8f_ls_PuffBase
{
  override void PostBeginPlay()
  {
    PlayerInfo player = players[consolePlayer];
    string c = CVar.GetCVar("m8f_ls_ColorOnTarget", player).GetString();
    double s = CVar.GetCVar("m8f_ls_Scale", player).GetFloat();

    SetShade(c);
    Scale.X  = s;
    Scale.Y  = s;
  }
}

class m8f_ls_LaserP0 : m8f_ls_PuffPositive {States { Spawn: TNT1 A 0; WDO0 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserP1 : m8f_ls_PuffPositive {States { Spawn: TNT1 A 0; WDO1 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserP2 : m8f_ls_PuffPositive {States { Spawn: TNT1 A 0; WDO2 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserP3 : m8f_ls_PuffPositive {States { Spawn: TNT1 A 0; WDO3 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserP4 : m8f_ls_PuffPositive {States { Spawn: TNT1 A 0; WDO4 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserP5 : m8f_ls_PuffPositive {States { Spawn: TNT1 A 0; WDO5 A 1 BRIGHT; Stop; }}

class m8f_ls_LaserN0 : m8f_ls_PuffNegative {States { Spawn: TNT1 A 0; WDO0 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserN1 : m8f_ls_PuffNegative {States { Spawn: TNT1 A 0; WDO1 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserN2 : m8f_ls_PuffNegative {States { Spawn: TNT1 A 0; WDO2 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserN3 : m8f_ls_PuffNegative {States { Spawn: TNT1 A 0; WDO3 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserN4 : m8f_ls_PuffNegative {States { Spawn: TNT1 A 0; WDO4 A 1 BRIGHT; Stop; }}
class m8f_ls_LaserN5 : m8f_ls_PuffNegative {States { Spawn: TNT1 A 0; WDO5 A 1 BRIGHT; Stop; }}

class m8f_ls_InvisiblePuff : m8f_ls_PuffBase {States {Spawn: TNT1 A 0; Stop;}}
