//-----------------------------------------------------------------------------
//
// Copyright 2018 mmaulwurff (Alexander Kromm)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/
//
//-----------------------------------------------------------------------------
//

class m8f_ls_Helper
{

  static void SendResultString(PlayerInfo player, string result)
  {
    if (!player) { return; }
    CVar messageCVar = CVar.GetCVar("m8f_ls_ResultString", player);
    messageCVar.SetString(result);
  }

  static void SendResultInt(PlayerInfo player, int result)
  {
    if (!player) { return; }
    CVar messageCVar = CVar.GetCVar("m8f_ls_ResultInt", player);
    messageCVar.SetInt(result);
  }

  play static void GetAimPitch(Actor activator)
  {
    if (!activator) { return; }
    let player = activator.player;
    if (!player) { return; }

    double slope = activator.BulletSlope(null, ALF_PORTALRESTRICT);
    //Console.Printf("%d", slope);
    SendResultInt(player, slope);
  }

  play static void TargetIsPresent(Actor activator)
  {
    if (!activator) { return; }
    let player = activator.player;
    if (!player) { return; }

    Actor target    = activator.AimTarget();
    bool  isPresent = (target != null);
    SendResultInt(player, isPresent);
  }

  play static void IsSlot1(Actor activator)
  {
    if (!activator) { return; }
    let player = activator.player;
    if (!player) { return; }

    Weapon w = player.readyWeapon;
    if (w == null) { return SendResultInt(player, false); }

    int located;
    int slot;
    int priority;
    [located, slot, priority] = player.weapons.LocateWeapon(w.GetClassName());
    SendResultInt(player, (slot == 1));
  }

} // m8f_ls_Helper
