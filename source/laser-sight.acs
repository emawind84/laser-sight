#library "LIBLASERSIGHT"
#include "zcommon.acs"

function bool LS_IsTitlemap(void)
{
  str mapLumpName = StrParam(n:PRINTNAME_LEVEL);
  return (StrICmp(mapLumpName, "TITLEMAP") == 0);
}

script "ShowLaserSight" ENTER
{
  if (LS_IsTitlemap()) { terminate; }

  int  updatePeriod     = 10;
  int  updateCount      = 0;
  int  playerN          = PlayerNumber();
  int  distanceCheckTid = UniqueTID();
  int  laserColor       = GetUserCVar(playerN, "m8f_wm_LaserColor");
  bool showLaserSight   = GetUserCVar(playerN, "m8f_wm_ShowLaserSight");

  while (true)
  {
    if (updateCount < updatePeriod) { ++updateCount; }
    else
    {
      updateCount = 0;

      laserColor     = GetUserCVar(playerN, "m8f_wm_LaserColor");
      showLaserSight = GetUserCVar(playerN, "m8f_wm_ShowLaserSight");
    }

    if (showLaserSight)
    {
      int maybeChangedLaserColor = laserColor;
      if (GetUserCVar(playerN, "m8f_wm_TSChangeLaserColor")
          && GetUserCVar(playerN, "m8f_ts_has_target"))
      {
        maybeChangedLaserColor = (laserColor + 1) % 3;
      }
      WM_ShowLaserSight(distanceCheckTid, maybeChangedLaserColor);
    }

    Delay(1);
  }
}

// Laser sight section /////////////////////////////////////////////////////////

#define N_PUFFS 6

str puffs[3][N_PUFFS] =
{
  { "WM_Laser5", "WM_Laser0", "WM_Laser1", "WM_Laser2", "WM_Laser3", "WM_Laser4" },
  { "WM_LaserG5", "WM_LaserG0", "WM_LaserG1", "WM_LaserG2", "WM_LaserG3", "WM_LaserG4"},
  { "WM_LaserB5", "WM_LaserB0", "WM_LaserB1", "WM_LaserB2", "WM_LaserB3", "WM_LaserB4"},
};

#define MAX_DISTANCE 4096.0
#define PUFF_FLAGS FHF_NORANDOMPUFFZ | FHF_NOIMPACTDECAL

function int WM_GetAimPitch(void)
{
  ScriptCall("WMZscriptHelper", "GetAimPitch");
  int playerN = PlayerNumber();
  return FixedMul(GetUserCVar(playerN, "m8f_ls_ResultInt"), 180.0);
}

function bool WM_TargetIsPresent(void)
{
  ScriptCall("WMZscriptHelper", "TargetIsPresent");
  int playerN = PlayerNumber();
  return GetUserCVar(playerN, "m8f_ls_ResultInt");
}

function void WM_ShowLaserSight(int distanceCheckTid, int laserColor)
{
  int angle = GetActorAngle(0);
  int pitch;
  if (WM_TargetIsPresent()) { pitch = WM_GetAimPitch(); }
  else                      { pitch = GetActorPitch(0); }
  LineAttack(0, angle, pitch, 0, "WM_InvisiblePuff", "None", MAX_DISTANCE,
             PUFF_FLAGS, distanceCheckTid);

  int distance = VectorLength(GetActorX(distanceCheckTid) - GetActorX(0),
                              GetActorY(distanceCheckTid) - GetActorY(0));

  if (distance < 1572864) { return; }

  int iPuff = 0;
  if      (distance <  10485760) { iPuff = 1; }
  else if (distance <  26214400) { iPuff = 2; }
  else if (distance <  52428800) { iPuff = 3; }
  else if (distance < 104857600) { iPuff = 4; }
  else                           { iPuff = 5; }

  str puff = puffs[laserColor][iPuff];

  /*
  Log(i:distance);
  Log(s:puff);
  ///*///

  LineAttack(0, angle, pitch, 0, puff, "None", MAX_DISTANCE, PUFF_FLAGS);
  //WM_FireLaser(puff);
}

// Fire Junk Section ///////////////////////////////////////////////////////////

script "WM_FireJunk" (void)
{
  PlaySound(0, "wmenu/throw");
  Delay(5);
  NoiseAlert(0, 0);
  int angle = GetActorAngle(0);
  int pitch = GetActorPitch(0);
  LineAttack(0, angle, pitch, 0, "WM_JunkPuff", "None", 2048.0, FHF_NOIMPACTDECAL);
}

// Game Detection Section //////////////////////////////////////////////////////

function bool WM_IsDoom1(void)
{
  str filtered = StrParam(l:"WM_GAME");
  bool doom1 = (StrCmp(filtered, "1") == 0);
  return doom1;
}

function bool WM_IsDoom2(void)
{
  str filtered = StrParam(l:"WM_GAME");
  bool doom2 = (StrCmp(filtered, "2") == 0);
  return doom2;
}

function bool WM_IsFreedoom(void)
{
  str filtered = StrParam(l:"WM_GAME");
  bool freedoom = (StrCmp(filtered, "3") == 0);
  return freedoom;
}

function bool WM_IsRekkr(void)
{
  str  checkString = StrParam(l:"E1TEXT");
  str  rekkrString = "You've been through war.";
  int  rekkrLength = StrLen(rekkrString);
  bool isRekkr     = StrICmp(rekkrString, StrLeft(checkString, rekkrLength)) == 0;
  return isRekkr;
}

function bool WM_IsHarmony(void)
{
  str checkString = StrParam(l:"C1TEXT");
  str harmString = "HEADING DOWN YOU FINALLY HAVE";
  int harmLength = StrLen(harmString);
  bool isHarmony = StrICmp(harmString, StrLeft(checkString, harmLength)) == 0;
  return isHarmony;
}

function bool WM_IsEVP(void)
{
  bool isEVP = CheckClass("EVPBFGBall");
  return isEVP;
}

function bool WM_IsFlakesDoom(void)
{
  bool isFlakesDoom = CheckClass("FKHAR");
  return isFlakesDoom;
}

function bool WM_IsAbortM(void)
{
  bool isAbortM = CheckClass("AbortButton");
  return isAbortM;
}

function bool WM_IsCyanDoom(void)
{
  bool isCyanDoom = CheckClass("STMinigun")
    && CheckClass("Daedabus")
    && CheckClass("VitalitySerum");
  return isCyanDoom;
}
