#library "LIBLASERSIGHT"
#include "zcommon.acs"

function bool LS_IsTitlemap(void)
{
  str mapLumpName = StrParam(n:PRINTNAME_LEVEL);
  return (StrICmp(mapLumpName, "TITLEMAP") == 0);
}

function bool LS_IsSlot1(int playerN)
{
  ScriptCall("m8f_ls_Helper", "IsSlot1");
  return GetUserCVar(playerN, "m8f_ls_ResultInt");
}

script "ShowLaserSight" ENTER
{
  if (LS_IsTitlemap()) { terminate; }

  int  updateCount       = 0;
  int  playerN           = PlayerNumber();
  int  distanceCheckTid  = UniqueTID();

  int  laserColor        = GetUserCVar(playerN, "m8f_wm_LaserColor");
  bool targetColorChange = GetUserCVar(playerN, "m8f_wm_TSChangeLaserColor");
  bool hideOnSlot1       = GetUserCVar(playerN, "m8f_ls_HideOnSlot1");

  while (true)
  {
    int updatePeriod   = GetUserCVar(playerN, "m8f_ls_UpdatePeriod");
    int showLaserSight = GetUserCVar(playerN, "m8f_wm_ShowLaserSight");

    if ((updatePeriod == 0 || updateCount >= updatePeriod)
        && updatePeriod != -1)
    {
      updateCount = 0;

      laserColor        = GetUserCVar(playerN, "m8f_wm_LaserColor");
      targetColorChange = GetUserCVar(playerN, "m8f_wm_TSChangeLaserColor");
      hideOnSlot1       = GetUserCVar(playerN, "m8f_ls_HideOnSlot1");
    }
    else { ++updateCount; }

    if (showLaserSight)
    {
      if (hideOnSlot1) if (LS_IsSlot1(playerN))
      {
        Delay(1);
        continue;
      }

      int maybeChangedLaserColor = laserColor;
      if (targetColorChange && GetUserCVar(playerN, "m8f_ts_has_target"))
      {
        maybeChangedLaserColor = (laserColor + 1) % 3;
      }
      WM_ShowLaserSight(distanceCheckTid, maybeChangedLaserColor, playerN);
    }

    Delay(1);
  }
}

// Laser sight section /////////////////////////////////////////////////////////

#define N_PUFFS 6

str puffs[3][N_PUFFS] =
{
  { "WM_Laser5", "WM_Laser0", "WM_Laser1", "WM_Laser2", "WM_Laser3", "WM_Laser4" },
  { "WM_LaserG5", "WM_LaserG0", "WM_LaserG1", "WM_LaserG2", "WM_LaserG3", "WM_LaserG4"},
  { "WM_LaserB5", "WM_LaserB0", "WM_LaserB1", "WM_LaserB2", "WM_LaserB3", "WM_LaserB4"},
};

#define MAX_DISTANCE 4096.0
#define PUFF_FLAGS FHF_NORANDOMPUFFZ | FHF_NOIMPACTDECAL

function int WM_GetAimPitch(int playerN)
{
  ScriptCall("m8f_ls_Helper", "GetAimPitch");
  return FixedMul(GetUserCVar(playerN, "m8f_ls_ResultInt"), 180.0);
}

function bool WM_TargetIsPresent(int playerN)
{
  ScriptCall("m8f_ls_Helper", "TargetIsPresent");
  return GetUserCVar(playerN, "m8f_ls_ResultInt");
}

function void WM_ShowLaserSight(int distanceCheckTid, int laserColor, int playerN)
{
  int angle = GetActorAngle(0);
  int pitch;
  if (WM_TargetIsPresent(playerN)) { pitch = WM_GetAimPitch(playerN); }
  else                             { pitch = GetActorPitch(0); }
  LineAttack(0, angle, pitch, 0, "WM_InvisiblePuff", "None", MAX_DISTANCE,
             PUFF_FLAGS, distanceCheckTid);

  int distance = VectorLength(GetActorX(distanceCheckTid) - GetActorX(0),
                              GetActorY(distanceCheckTid) - GetActorY(0));

  if (distance < 1572864) { return; }

  int iPuff = 0;
  if      (distance <  10485760) { iPuff = 1; }
  else if (distance <  26214400) { iPuff = 2; }
  else if (distance <  52428800) { iPuff = 3; }
  else if (distance < 104857600) { iPuff = 4; }
  else                           { iPuff = 5; }

  str puff = puffs[laserColor][iPuff];

  /*
  Log(i:distance);
  Log(s:puff);
  ///*///

  LineAttack(0, angle, pitch, 0, puff, "None", MAX_DISTANCE, PUFF_FLAGS);
  //WM_FireLaser(puff);
}
